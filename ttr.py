from pyrogram import Client, filters
from pyrogram.types import Message
import time

# ---------- CONFIG ----------
API_ID = 29680263           # Telegram API ID
API_HASH = "a251c8203284c9fe7812f418ec8aa3a9"
SESSION = "my_account"     # Pyrogram session ‡¶®‡¶æ‡¶Æ
OWNER_ID = 6577308099       # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ numeric Telegram ID
COOLDOWN_SECONDS = 300     # ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü cooldown

# ---------- OFFLINE MESSAGE ----------
OFFLINE_MSG = (
    "üí≠ I‚Äôm offline for a while...\n"
    "No replies, no calls ‚Äî just a little peace & silence.\n"
    "If it‚Äôs important, leave your message... I‚Äôll be back when I‚Äôm meant to. üåô\n\n"
    "This text was automatically generated by Docker"
)

# ---------- VARIABLES ----------
sleep_mode = False
cooldowns = {}  # user_id : last_active_time

# ===== COMMANDS =====
@app.on_message(filters.command("sleep") & filters.user(OWNER_ID))
async def activate_sleep(_, msg: Message):
    global sleep_mode
    sleep_mode = True
    await msg.reply_text("üò¥ Sleep mode activated. Auto-reply is now ON.")

@app.on_message(filters.command("off") & filters.user(OWNER_ID))
async def deactivate_sleep(_, msg: Message):
    global sleep_mode
    sleep_mode = False
    await msg.reply_text("‚òÄÔ∏è Sleep mode deactivated. Auto-reply is now OFF.")

@app.on_message(filters.command("status") & filters.user(OWNER_ID))
async def status_check(_, msg: Message):
    status = "ON" if sleep_mode else "OFF"
    await msg.reply_text(f"Auto-Reply Status: {status}")

# ===== MARK SELF ACTIVE =====
@app.on_message(filters.me)
async def mark_active(_, msg: Message):
    """‡¶Ø‡¶ñ‡¶® ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá, ‡¶ì‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü auto-reply ‡¶¨‡¶®‡ßç‡¶ß ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§"""
    cooldowns[msg.chat.id] = time.time()

# ===== AUTO-REPLY =====
@app.on_message(filters.private | filters.group)
async def auto_reply(_, msg: Message):
    global sleep_mode
    if not sleep_mode:
        return

    # ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¨‡¶æ‡¶¶
    if msg.from_user and msg.from_user.is_self:
        return

    # ‡¶¨‡¶ü ‡¶¨‡¶æ‡¶¶
    if msg.from_user and msg.from_user.is_bot:
        return

    # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá mention ‡¶õ‡¶æ‡ßú‡¶æ skip
    if msg.chat.type in ["supergroup", "group"] and not msg.mentioned:
        return

    try:
        user_id = msg.chat.id
        now = time.time()
        last_time = cooldowns.get(user_id, 0)

        # ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü cooldown ‡¶ö‡ßá‡¶ï
        if now - last_time < COOLDOWN_SECONDS:
            return

        cooldowns[user_id] = now

        # Auto-reply (Plain Text, no parse_mode)
        await msg.reply_text(OFFLINE_MSG)

    except Exception as e:
        # ‡¶ï‡ßã‡¶®‡ßã crash ‡¶π‡¶¨‡ßá ‡¶®‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ skip ‡¶ï‡¶∞‡¶¨‡ßá
        print("‚ö†Ô∏è Auto-reply skipped due to:", e)

# ===== MAIN =====
if __name__ == "__main__":
    print("ü§ñ Userbot running in background... Use /sleep, /off, /status from your Telegram account.")
    app.run()
