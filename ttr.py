from pyrogram import Client, filters
from pyrogram.types import Message
import asyncio, time, os

# ---------- CONFIG ----------
API_ID = 29680263             # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telegram API ID
API_HASH = "a251c8203284c9fe7812f418ec8aa3a9"
SESSION = "my_account"       # ‡¶∏‡ßá‡¶∂‡¶® ‡¶®‡¶æ‡¶Æ (Pyrogram ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá)
OWNER_ID = 6577308099         # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Numeric Telegram ID
COOLDOWN_SECONDS = 300       # ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶® ‡¶∏‡¶Æ‡ßü

# ---------- TEXT ----------
OFFLINE_MSG = (
    "üí≠ <b>I‚Äôm offline for a while...</b>\n"
    "<i>No replies, no calls ‚Äî just a little peace & silence.</i>\n"
    "If it‚Äôs important, leave your message... I‚Äôll be back when I‚Äôm meant to. üåô\n\n"
    "<code>This text was automatically generated by Docker</code>"
)

# ---------- VARIABLES ----------
sleep_mode = False
cooldowns = {}   # user_id : last_active_time (timestamp)

# ---------- INIT ----------
app = Client(SESSION, api_id=API_ID, api_hash=API_HASH)


# ===== COMMANDS =====

@app.on_message(filters.command("sleep") & filters.user(OWNER_ID))
async def activate_sleep(_, msg: Message):
    global sleep_mode
    sleep_mode = True
    await msg.reply_text("üò¥ Sleep mode activated. Auto-reply is now <b>ON</b>.", parse_mode="html")

@app.on_message(filters.command("off") & filters.user(OWNER_ID))
async def deactivate_sleep(_, msg: Message):
    global sleep_mode
    sleep_mode = False
    await msg.reply_text("‚òÄÔ∏è Sleep mode deactivated. Auto-reply is now <b>OFF</b>.", parse_mode="html")

@app.on_message(filters.command("status") & filters.user(OWNER_ID))
async def status_check(_, msg: Message):
    status = "üü¢ ON" if sleep_mode else "üî¥ OFF"
    await msg.reply_text(f"üõ∞Ô∏è <b>Auto-Reply Status:</b> {status}", parse_mode="html")

@app.on_message(filters.me)
async def mark_active(_, msg: Message):
    """‡¶Ø‡¶ñ‡¶® ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá, ‡¶¨‡¶ü ‡¶¨‡ßÅ‡¶ù‡¶¨‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø active‡•§"""
    cooldowns[msg.chat.id] = time.time()


@app.on_message(filters.private | filters.group)
async def auto_reply(_, msg: Message):
    """‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶® ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ"""
    global sleep_mode
    if not sleep_mode:
        return

    # ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¨‡¶æ‡¶¶
    if msg.from_user and msg.from_user.is_self:
        return

    # ‡¶¨‡¶ü ‡¶¨‡¶æ‡¶¶
    if msg.from_user and msg.from_user.is_bot:
        return

    # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡¶æ‡¶¶
    if msg.chat.type in ["supergroup", "group"] and not msg.mentioned:
        return

    user_id = msg.chat.id
    now = time.time()
    last_time = cooldowns.get(user_id, 0)

    # ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶® ‡¶ö‡ßá‡¶ï (‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü)
    if now - last_time < COOLDOWN_SECONDS:
        return

    cooldowns[user_id] = now
    try:
        await msg.reply_text(OFFLINE_MSG, parse_mode="html")
    except Exception as e:
        print(f"Failed to reply: {e}")


# ===== MAIN =====
if __name__ == "__main__":
    print("ü§ñ Userbot running in background... Use /sleep, /off, /status from your Telegram account.")
    app.run()
