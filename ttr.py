from pyrogram import Client, filters
from pyrogram.types import Message
import time

# ---------- CONFIG ----------
API_ID = 29680263           # Telegram API ID
API_HASH = "a251c8203284c9fe7812f418ec8aa3a9"
SESSION = "my_account"     # Pyrogram session নাম
OWNER_ID = 6577308099       # তোমার numeric Telegram ID

COOLDOWN_PRIVATE = 3600    # Private chat cooldown (1 ঘন্টা)
COOLDOWN_GROUP = 300       # Group mention cooldown (৫ মিনিট)

# ---------- OFFLINE MESSAGE ----------
OFFLINE_MSG = (
    "I’m offline for a while...\n"
    "No replies, no calls — just a little peace and silence.\n"
    "If it’s important, leave your message. I’ll be back when I’m meant to.\n\n"
    "This text was automatically generated by Docker"
)

# ---------- VARIABLES ----------
sleep_mode = False
cooldowns = {}  # user_id : last_active_time

# ---------- INIT ----------
app = Client(
    SESSION,
    api_id=API_ID,
    api_hash=API_HASH
)

# ===== COMMANDS =====
@app.on_message(filters.command("sleep") & filters.user(OWNER_ID))
async def activate_sleep(_, msg: Message):
    global sleep_mode
    sleep_mode = True
    await msg.reply_text("Sleep mode activated. Auto-reply is now ON.")

@app.on_message(filters.command("off") & filters.user(OWNER_ID))
async def deactivate_sleep(_, msg: Message):
    global sleep_mode
    sleep_mode = False
    await msg.reply_text("Sleep mode deactivated. Auto-reply is now OFF.")

@app.on_message(filters.command("status") & filters.user(OWNER_ID))
async def status_check(_, msg: Message):
    status = "ON" if sleep_mode else "OFF"
    await msg.reply_text(f"Auto-reply status: {status}")

# ===== MARK SELF ACTIVE =====
@app.on_message(filters.me)
async def mark_active(_, msg: Message):
    """যখন তুমি নিজে মেসেজ পাঠাবে, ওই ইউজারের জন্য cooldown reset হবে।"""
    cooldowns[msg.chat.id] = time.time()

# ===== AUTO-REPLY =====
@app.on_message(filters.private | filters.group)
async def auto_reply(_, msg: Message):
    global sleep_mode
    if not sleep_mode:
        return

    if msg.from_user and msg.from_user.is_self:
        return

    if msg.from_user and msg.from_user.is_bot:
        return

    try:
        user_id = msg.chat.id
        now = time.time()
        last_time = cooldowns.get(user_id, 0)

        # ===== PRIVATE CHAT =====
        if msg.chat.type == "private":
            if now - last_time < COOLDOWN_PRIVATE:
                return
            cooldowns[user_id] = now
            await msg.reply_text(OFFLINE_MSG)
            return

        # ===== GROUP / SUPERGROUP =====
        if msg.chat.type in ["group", "supergroup"]:
            if msg.entities:  # যদি কোন mention থাকে
                mentioned_usernames = [msg.text[ent.offset:ent.offset+ent.length] for ent in msg.entities if ent.type == "mention"]
                if "@professor_cry" in mentioned_usernames:
                    if now - last_time < COOLDOWN_GROUP:
                        return
                    cooldowns[user_id] = now
                    await msg.reply_text(OFFLINE_MSG)
            return

    except Exception as e:
        print("Auto-reply skipped due to:", e)

# ===== MAIN =====
if __name__ == "__main__":
    print("Userbot running in background... Use /sleep, /off, /status from your Telegram account.")
    app.run()
